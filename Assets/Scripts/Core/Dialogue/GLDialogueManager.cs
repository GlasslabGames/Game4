//
// GLDialogueManager.cs
// Author: Jerry Fu <jerry@glasslabgames.org>
// 2014 - 8 - 19
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using UnityEngine;
using PixelCrushers.DialogueSystem;
/**
 * Full time baby-sitter of PixelCrushers dialogue system since it can't seem to take care of itself.
 */
public class GLDialogueManager : SingletonBehavior<GLDialogueManager>
{
  private DialogueSystemController m_dialogueController;

  public DialogueDatabase GameDialogueDatabase;
  public GameObject DialogueUI;

  protected GLDialogueManager() {}

  protected override void Awake()
  {
    base.Awake();

    spawnDialogueManager();
  }

  private void spawnDialogueManager()
  {
    if (m_dialogueController == null)
    {
      m_dialogueController = DialogueManager.Instance;
      GameObject obj = m_dialogueController.gameObject;
      obj.transform.parent = this.transform;
      m_dialogueController.initialDatabase = GameDialogueDatabase;
      m_dialogueController.AddDatabase(GameDialogueDatabase);
      m_dialogueController.displaySettings.cameraSettings.defaultSequence = "";
      m_dialogueController.DialogueUI = DialogueUI.GetComponent<GLDialogueUI>();
      m_dialogueController.displaySettings.subtitleSettings.continueButton = DisplaySettings.SubtitleSettings.ContinueButtonMode.Always;
      m_dialogueController.displaySettings.subtitleSettings.showPCSubtitlesDuringLine = 
        m_dialogueController.displaySettings.subtitleSettings.showNPCSubtitlesWithResponses =
          m_dialogueController.displaySettings.subtitleSettings.showNPCSubtitlesDuringLine = true;
      m_dialogueController.displaySettings.inputSettings.alwaysForceResponseMenu = false;
      m_dialogueController.displaySettings.inputSettings.responseTimeout = 0;
      m_dialogueController.displaySettings.alertSettings = new DisplaySettings.AlertSettings(); // spec says default is new'd, but trying to access returns null
      m_dialogueController.displaySettings.alertSettings.alertCheckFrequency = 0f;
      m_dialogueController.debugLevel = DialogueDebug.DebugLevel.Warning;
      m_dialogueController.dontDestroyOnLoad = false;

      if (obj.GetComponent<DialogueEventHandler>() == null)
      {
        obj.AddComponent<DialogueEventHandler>();
      }
    }
  }

  public void StartConversation(string conversationName, Transform actorTransform = null, Transform conversantTransform = null)
  {
    spawnDialogueManager();
    m_dialogueController.StartConversation(conversationName, actorTransform, conversantTransform);
  }
}

